1. We are designing a class and decide we want a field and a getter and setter for it. Should we write a unit test before writing the getter and before writing a setter?

No.

First, from the design point of view, do not write the field or the getter/setter until
a behavior really needs it. Let the state or the field not be self-serving.

A unit test should be on a unit of code, which is a smallest piece of code that does useful work.
The getters and setters do not do any useful work most of the time. So, they do not quality as units. When writint tests for a behavior or a logic, bring in the getters and setters only then when needed. They will be called from the functions that are being tested rather than having tests directly on them.

If we ever need to do significant validation in a setter, then write a test but only right before such validation will be added to the existing setter.

2. We're designing a function that performs an action, sleeps for one second and then performs another action. How should we approach writing a unit test for it?

This is a complex code that can be refactored into smaller functions that can be designed using unit tests.

The function most lieky fails the SLAP - Single Level of Abstraction Principle. So, use the 
compose method pattern and refactor the code and focus on testing the units that are extracted from the function.

Compose method pattern says that a function should be composed of instructions all at the same
level of detail or abstraction.

3. We're designing a function that makes a call to a remote webservice, performs one set of action if the result of the call is in a range and a different set of action if the result of the call is out side of that range. How should we approach writing a unit test for it?

result = call to a service
if(result in ranage) {
  ...
}
  ...
}

Dependency inject and use stubs for the service. Also, consider, if the action is
complex or extensive, to sparate into functions. In this case, we can use a spy for the functions and still use DI and test for the outer function.

