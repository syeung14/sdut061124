Agile development is really feedback driven development.

Agile development is *not* about speed.

It is really about sustainability.

It is about our ability to continue with development at a resonable pace
as we go through the change in requiremenents and also the environments.

It is sometimes very important to slow down in order to sustain the speed
in the long term.

https://twitter.com/venkat_s/status/939166889779003393

I do automated testing not because I have a lot of time, it is because I don't.

You don't want to build what your customers wanted, you want to build what
they still want.

There are two cycles of feedback:
1. That the code meets the customers' or business' expectations - cycle of relevance
2. The code worked yesterday, does it still work today? - cycles of regression

Software is a non-linear system

A change in one place may drastically affect a very different place in the application.

https://twitter.com/venkat_s/status/1710272036554088449

We evolve design to accommodate the change in requirements.

How do we know if the design is not brittle and is easier to change?
How do we know that a change does not break the current behavior of the code?

I love manual testing.

But, what is testing?

Testing is an act of gaining insight into the application we are designing and
developing. Does this feel right, is the workflow good, is it necessary,
can this be better, is the performance adequate,...

We use the term testing too broadly and often in an incorrect manner.

If we ask "the code worked yesterday and does it still work as expected today"
This is *not* testing even though we call it as testing.

It is an act of verification.

Test manually, but verify automated.

Automated verification (though called testing).

Even though we call it automated testing (because many have done so already)
it really is automated verification.

Why not do manual verification?

If we implement 4 user stories in sprint 1
We may need, let us say, 2 days to fully test those user stories manually.

In the next sprint, we implement 4 new user stories.
How much time do we need to fully test in this sprint?

We may need 4 days!

Remember that software is a non-liner system. We have to make sure the
changes and the new additions did not break any existing features.

Now with each added sprint, each added story, we need more and more time to
test.

At some point in time, we may need weeks. That is not possible to accommodate
within a sprint. So, we may say, go on, write more code, we will test when 
things are done... - this leads to waterfall development.

Agile development with manual verification turns into waterfall development.
We celebrate it as agile, when in reality it is really far from it.

A lot of organizations do what I like to call as "Agile by convenience"
they follow rituals but shy away from the rigor that helps to achieve sustainability.

Automated verification (automated testing) is about rapid feedback loops.
You want to rely on the feedback to know that things are still working as
expected. Also, to know that we can accommodate the change in requirements.

Automated verification ====> Sustainable pace of development

Automated unit tests
Functional tests
Acceptance tests
Integration tests
...

Automated unit tests have two benefits:
1. Regression benefits
2. Design benefits

Regression benefits is the long term benefit of automated unit tests. If things
fall apart we know it right away.

"Unit tests are angels on your shoulder"

I would rather hear from the unit tests that my code sucks than from my
colleagues or customers.

The cost of fixing an error increases over time. If we automated the tests
we can get quick feedback and that reduces the cost of fixing over time.

If we automate tests at the GUI level these tests often become brittle,
they also are slow to run, and hard to maintain.

Think of the tests as ice cream cone anti pattern vs. test pyramid

We want to do more tests/verification at the lower levels and
fewer (not zero) tests at the higher levels leading into the GUI.

Instead of doing more tests at the GUI level, push tests to lower level.s

Where should a test go?

The tests should be at the lowest level possible. If the code is at a particular
level, the tests should not be at any higher level than that.

Even on the front end, we typically have multiple levels and so does the backend.
The tests should be at the appropriate level on the front end and the backend.

One of the problems with TDD is it is a skill. Like any skill, we take time to
get better at it. We are often terrible with things in the beginning but we
get better over time, with practice.

Remember the time you learn to 
ride a bike
drive a car
to ski
to play music
to code
...

TDD is a skill, it takes time to get better at it.

Productivity (myth)

             --------
            / 
           / 
          / 
         / 
---------

Productivity (reality)

                                     --------
                                    / 
                                   / 
                                  / 
                                 / 
---------                       /
         \                     /
          \                   /
           \                 /
            \----------------
         ^
	 |
	 Panic and we often give up (unless we are determined to stay our course and succeed)

Automated unit tests are the software equivalent of exercising.

Most will agree these are good, but often do not prioritize and lack the discipline to follow or practice.

For us to embrace these ideas we really need discipline, commitment, and
dedication.


